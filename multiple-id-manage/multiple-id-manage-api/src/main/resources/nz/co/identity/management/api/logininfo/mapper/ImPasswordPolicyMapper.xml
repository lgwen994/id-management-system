<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="nz.co.identity.management.api.logininfo.mapper.ImPasswordPolicyMapper">
	<resultMap id="BaseResultMap"
		type="nz.co.identity.management.api.logininfo.entity.ImPasswordPolicy">
		<id column="password_policy_id" jdbcType="VARCHAR" property="passwordPolicyId" />
		<result column="password_policy_code" jdbcType="VARCHAR"
			property="passwordPolicyCode" />
		<result column="company_code" jdbcType="VARCHAR" property="companyCode" />
		<result column="active_start_time" jdbcType="TIMESTAMP"
			property="activeStartTime" />
		<result column="active_end_time" jdbcType="TIMESTAMP" property="activeEndTime" />
		<result column="password_min_length" jdbcType="NUMERIC"
			property="passwordMinLength" />
		<result column="password_letter_type" jdbcType="VARCHAR"
			property="passwordLetterType" />
		<result column="password_min_letter_type" jdbcType="NUMERIC"
			property="passwordMinLetterType" />
		<result column="password_in_history" jdbcType="NUMERIC"
			property="passwordInHistory" />
		<result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
		<result column="created_user" jdbcType="VARCHAR" property="createdUser" />
		<result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
		<result column="updated_user" jdbcType="VARCHAR" property="updatedUser" />
		<result column="deleted_flg" jdbcType="NUMERIC" property="deletedFlg" />
		<result column="version_no" jdbcType="NUMERIC" property="versionNo" />
	</resultMap>
	<sql id="Base_Column_List">
		password_policy_id, password_policy_code, company_code,
		active_start_time,
		active_end_time,
		password_min_length,
		password_letter_type, password_min_letter_type, password_in_history,
		created_time, created_user, updated_time, updated_user, deleted_flg,
		version_no
	</sql>
    <sql id="Base_Search_Condition">
        where
        <if test="passwordPolicy.passwordPolicyCode != null">
            password_policy_code like CONCAT('%',
            #{passwordPolicy.passwordPolicyCode,jdbcType=VARCHAR},
            '%') and
        </if>
        <if test="passwordPolicy.companyCode != null">
            company_code like CONCAT('%',
            #{passwordPolicy.companyCode,jdbcType=VARCHAR},
            '%') and
        </if>
        <if test="passwordPolicy.activeEndTime != null">
            active_start_time &lt;=
            #{passwordPolicy.activeEndTime,jdbcType=TIMESTAMP} and
        </if>
        <if test="passwordPolicy.activeStartTime != null">
            active_end_time &gt;=
            #{passwordPolicy.activeStartTime,jdbcType=TIMESTAMP} and
        </if>
        <if test="passwordPolicy.passwordMinLength != null">
            password_min_length =
            #{passwordPolicy.passwordMinLength,jdbcType=NUMERIC} and
        </if>
        <if test="passwordPolicy.passwordLetterType != null">
            password_letter_type like CONCAT('%',
            #{passwordPolicy.passwordLetterType,jdbcType=VARCHAR},'%')
            and
        </if>
        <if test="passwordPolicy.passwordMinLetterType != null">
            password_min_letter_type =
            #{passwordPolicy.passwordMinLetterType,jdbcType=NUMERIC}
            and
        </if>
        <if test="passwordPolicy.passwordInHistory != null">
            password_in_history =
            #{passwordPolicy.passwordInHistory,jdbcType=NUMERIC}
            and
        </if>
        deleted_flg = 0
    </sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from im_password_policy
		where password_policy_id =
		#{passwordPolicyId,jdbcType=VARCHAR}
		and
		deleted_flg = 0
	</select>
	<select id="selectMaxVersion" parameterType="java.lang.String"
		resultType="int">
		select
		max(version_no)
		from im_password_policy
		where
		password_policy_code =
		#{passwordPolicyCode,jdbcType=VARCHAR}
	</select>
	<select id="selectByPasswordPolicyCode" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from im_password_policy
		where password_policy_code =
		#{passwordPolicyCode,jdbcType=VARCHAR}
		and
		deleted_flg = 0
		order by
		updated_time desc,created_time desc
	</select>
	<select id="selectPasswordPolicy" parameterType="java.util.Map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from im_password_policy
        <include refid="Base_Search_Condition" />
		<if test="sort != null">
        order by
            <foreach item="item" collection="sort" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
		limit #{pageSize,jdbcType=NUMERIC}
		<if test="offsetNum > 0">
			offset #{offsetNum,jdbcType=NUMERIC}
		</if>
	</select>
    <select id="selectCountByPasswordPolicy" parameterType="java.util.Map"
        resultType="java.lang.Long">
        select count(1)
        from im_password_policy
        <include refid="Base_Search_Condition" />
    </select>
	<delete id="deleteByPasswordPolicyIdByVersion">
		delete from
		im_password_policy
		where
		password_policy_id =
		#{passwordPolicyId,jdbcType=VARCHAR}
		and
		version_no =
		#{versionNo,jdbcType=NUMERIC}
	</delete>
	<insert id="insert"
		parameterType="nz.co.identity.management.api.logininfo.entity.ImPasswordPolicy">
		insert into im_password_policy (password_policy_id,
		password_policy_code,
		company_code, active_start_time, active_end_time,
		password_min_length, password_letter_type,
		password_min_letter_type,
		password_in_history,
		created_time, created_user, deleted_flg,
		version_no
		)
		values
		(#{passwordPolicyId,jdbcType=VARCHAR},
		#{passwordPolicyCode,jdbcType=VARCHAR},
		#{companyCode,jdbcType=VARCHAR},
		#{activeStartTime,jdbcType=TIMESTAMP},
		#{activeEndTime,jdbcType=TIMESTAMP},
		#{passwordMinLength,jdbcType=NUMERIC},
		#{passwordLetterType,jdbcType=VARCHAR},
		#{passwordMinLetterType,jdbcType=NUMERIC},
		#{passwordInHistory,jdbcType=NUMERIC},
		#{createdTime,jdbcType=TIMESTAMP}, #{createdUser,jdbcType=VARCHAR},
		#{deletedFlg,jdbcType=NUMERIC}, #{versionNo,jdbcType=NUMERIC}
		)
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="java.util.Map">
		update im_password_policy
		<set>
			<if test="passwordPolicy.passwordPolicyCode != null">
				password_policy_code =
				#{passwordPolicy.passwordPolicyCode,jdbcType=VARCHAR},
			</if>
			<if test="passwordPolicy.companyCode != null">
				company_code =
				#{passwordPolicy.companyCode,jdbcType=VARCHAR},
			</if>
			<if test="passwordPolicy.activeStartTime != null">
				active_start_time =
				#{passwordPolicy.activeStartTime,jdbcType=TIMESTAMP},
			</if>
			<if test="passwordPolicy.activeEndTime != null">
				active_end_time =
				#{passwordPolicy.activeEndTime,jdbcType=TIMESTAMP},
			</if>
			<if test="passwordPolicy.passwordMinLength != null">
				password_min_length =
				#{passwordPolicy.passwordMinLength,jdbcType=NUMERIC},
			</if>
			<if test="passwordPolicy.passwordLetterType != null">
				password_letter_type =
				#{passwordPolicy.passwordLetterType,jdbcType=VARCHAR},
			</if>
			<if test="passwordPolicy.passwordMinLetterType != null">
				password_min_letter_type =
				#{passwordPolicy.passwordMinLetterType,jdbcType=NUMERIC},
			</if>
			<if test="passwordPolicy.passwordInHistory != null">
				password_in_history =
				#{passwordPolicy.passwordInHistory,jdbcType=NUMERIC},
			</if>
			<if test="passwordPolicy.createdTime != null">
				created_time =
				#{passwordPolicy.createdTime,jdbcType=TIMESTAMP},
			</if>
			<if test="passwordPolicy.createdUser != null">
				created_user =
				#{passwordPolicy.createdUser,jdbcType=VARCHAR},
			</if>
			<if test="passwordPolicy.updatedTime != null">
				updated_time =
				#{passwordPolicy.updatedTime,jdbcType=TIMESTAMP},
			</if>
			<if test="passwordPolicy.updatedUser != null">
				updated_user =
				#{passwordPolicy.updatedUser,jdbcType=VARCHAR},
			</if>
			<if test="passwordPolicy.deletedFlg != null">
				deleted_flg =
				#{passwordPolicy.deletedFlg,jdbcType=NUMERIC},
			</if>
			<if test="passwordPolicy.versionNo != null">
				version_no =
				#{passwordPolicy.versionNo,jdbcType=NUMERIC},
			</if>
		</set>
		where password_policy_id =
		#{passwordPolicy.passwordPolicyId,jdbcType=VARCHAR}
		<if test="versionBase != null">
			and
			version_no =
			#{versionBase,jdbcType=NUMERIC}
		</if>
		and
		deleted_flg = 0
	</update>
	<update id="updateByPrimaryKey" parameterType="java.util.Map">
		update
		im_password_policy
		set password_policy_code =
		#{passwordPolicy.passwordPolicyCode,jdbcType=VARCHAR},
		company_code =
		#{passwordPolicy.companyCode,jdbcType=VARCHAR},
		active_start_time =
		#{passwordPolicy.activeStartTime,jdbcType=TIMESTAMP},
		active_end_time =
		#{passwordPolicy.activeEndTime,jdbcType=TIMESTAMP},
		password_min_length =
		#{passwordPolicy.passwordMinLength,jdbcType=NUMERIC},
		password_letter_type =
		#{passwordPolicy.passwordLetterType,jdbcType=VARCHAR},
		password_min_letter_type =
		#{passwordPolicy.passwordMinLetterType,jdbcType=NUMERIC},
		password_in_history =
		#{passwordPolicy.passwordInHistory,jdbcType=NUMERIC},
		updated_time =
		#{passwordPolicy.updatedTime,jdbcType=TIMESTAMP},
		updated_user =
		#{passwordPolicy.updatedUser,jdbcType=VARCHAR},
		version_no =
		#{passwordPolicy.versionNo,jdbcType=NUMERIC}
		where password_policy_id =
		#{passwordPolicy.passwordPolicyId,jdbcType=VARCHAR}
		and
		version_no =
		#{versionBase,jdbcType=NUMERIC}
		and
		deleted_flg = 0
	</update>
</mapper>